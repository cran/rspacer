---
title: "Introduction to rspacer"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Introduction to rspacer}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
options(tidyverse.quiet = TRUE)
```

The goal of rspacer is to "wrap" the [RSpace API](https://community.researchspace.com/public/apiDocs), that is, allow you to use the API directly from R using convenience functions.

**This package (and its documentation) is a work-in-progress. Contributions are welcome!**

## Setting up rspacer

To use rspacer it needs to know two things:

1. The API URL for your RSpace instance (this is typically the URL of your RSpace instance followed by `api/v1`, e.g., `https://leiden.researchspace.com/api/v1`)
2. Your API key, which is an authentication token you can use instead of your username and password. To create an API key go to 'Manage API Key' section of your RSpace profile page (MyRSpace -> My Profile). **You should keep your API key private.** You can regenerate an API key at any time, which will invalidate the old key.

You can use the `set_api_url()` and `set_api_key()` functions to make these available to rspacer in the current session.
To make this information persistent you can store it in environment variables. An easy way to do this is with `usethis::edit_r_environ()`; in the file that opens, you should add the following lines (insert your own URL and key):

```
RSPACE_API_URL="https://leiden.researchspace.com/api/v1"
RSPACE_API_KEY="<YOUR_API_KEY_HERE>"
```

After saving the file and restarting R, you should now be able to run

```{r example}
library(rspacer)
api_status()
```

## Functionality

### Folders

Now you can use rspacer to interact with your RSpace Workspace.
For example, `folder_tree()` will show you the content of your Workspace as a tibble:

```{r}
folder_tree()
```

You can also specify an id or Unique ID (`globalId`) to show the contents of a specific folder:

```{r}
folder_tree(7819)
```

### Documents

#### Search

You can search for documents using the `document_search()` function:

```{r}
document_search("test")
```

#### Retrieve

You can retrieve documents using

```{r}
res <- document_retrieve("SD356307")
summary(res)
```

The result is json converted to an R list, to get the field information you could use

```{r}
library(tidyverse)
library(gt)
res$fields |>
  fields_to_data_frame() |>
  gt() |>
  fmt_markdown(columns = c(content))
```

#### Create

Creating (structured) documents is slightly more involved, see the Articles tab for detailed instructions.
